// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2022 13:52:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          IIC_slave_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IIC_slave_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SCL;
reg treg_SDA;
// wires                                               
wire SDA;
wire SDAr;
wire adr_match;
wire [3:0] bitcnt;
wire data_phase;
wire got_ACK;
wire incycle;
wire [7:0] mem;
wire op_read;

// assign statements (if any)                          
assign SDA = treg_SDA;
IIC_slave_module i1 (
// port map - connection between master ports and signals/registers   
	.SCL(SCL),
	.SDA(SDA),
	.SDAr(SDAr),
	.adr_match(adr_match),
	.bitcnt(bitcnt),
	.data_phase(data_phase),
	.got_ACK(got_ACK),
	.incycle(incycle),
	.mem(mem),
	.op_read(op_read)
);
initial 
begin 
#1000000 $finish;
end 

// SCL
initial
begin
	SCL = 1'b0;
	SCL = #50000 1'b1;
	SCL = #60000 1'b0;
	SCL = #25000 1'b1;
	# 5000;
	repeat(6)
	begin
		SCL = 1'b0;
		SCL = #5000 1'b1;
		# 5000;
	end
	SCL = 1'b0;
	SCL = #20000 1'b1;
	SCL = #10000 1'b0;
	SCL = #10000 1'b1;
	SCL = #20000 1'b0;
	SCL = #35000 1'b1;
	# 5000;
	repeat(7)
	begin
		SCL = 1'b0;
		SCL = #5000 1'b1;
		# 5000;
	end
	SCL = 1'b0;
	SCL = #50000 1'b1;
	SCL = #10000 1'b0;
	SCL = #220000 1'b1;
	SCL = #40000 1'b0;
end 

// SDA
initial
begin
	treg_SDA = 1'b0;
	treg_SDA = #40000 1'b1;
	treg_SDA = #50000 1'b0;
	treg_SDA = #40000 1'b1;
	treg_SDA = #80000 1'b0;
	treg_SDA = #100000 1'b1;
	treg_SDA = #30000 1'b0;
	treg_SDA = #320000 1'b1;
	treg_SDA = #40000 1'b0;
	treg_SDA = #160000 1'bZ;
end 
endmodule

