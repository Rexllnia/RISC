module ex(
input [31:0] inst_i,
input [31:0] inst_addr_i,
input [31:0] op1_i,
input [31:0] op2_i,
input [4:0]  rd_addr_i,
output reg[4:0] rd_addr_o,
output reg[31:0] rd_data_o,
output reg rd_write_en

);
	wire[6:0] opcode;
	wire[4:0] rd;
	wire [2:0] func3;
	wire [4:0]	rs1;
	wire [11:0] imm;
	assign opcode= inst_i[6:0];
	assign rd	=inst_i[11:7];
	assign func3 =inst_i[14:12];
	assign rs1	=inst_i[19:15];
	assign imm = inst_i[31:20];
	always @(*)begin
		case(opcode)
			7'b0010011:
				begin
					case(func3)
						3'b000: //INST_ADDI
							begin
								rd_data_o=op1_i+op2_i;
								rd_addr_o=rd_addr_i;
								rd_write_en=1'b1;
							end
						default:
							begin
								rd_data_o=0;
								rd_addr_o=0;
								rd_write_en=0;
							end
					endcase
				end
			default:
				begin
					rd_data_o=0;
					rd_addr_o=0;
					rd_write_en=0;
				end
				
		endcase
	end


endmodule
