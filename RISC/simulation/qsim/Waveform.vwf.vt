// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2022 22:08:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RISC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RISC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg en;
reg [31:0] imm;
reg jump;
reg rst;
reg zero;
// wires                                               
wire eno;
wire [31:0] ins_o;
wire [31:0] pc;

// assign statements (if any)                          
RISC i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.en(en),
	.eno(eno),
	.imm(imm),
	.ins_o(ins_o),
	.jump(jump),
	.pc(pc),
	.rst(rst),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #20000 1'b1;
	branch = #90000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// en
initial
begin
	en = 1'b1;
end 
// imm[ 31 ]
initial
begin
	imm[31] = 1'b0;
end 
// imm[ 30 ]
initial
begin
	imm[30] = 1'b0;
end 
// imm[ 29 ]
initial
begin
	imm[29] = 1'b0;
end 
// imm[ 28 ]
initial
begin
	imm[28] = 1'b0;
end 
// imm[ 27 ]
initial
begin
	imm[27] = 1'b0;
end 
// imm[ 26 ]
initial
begin
	imm[26] = 1'b0;
end 
// imm[ 25 ]
initial
begin
	imm[25] = 1'b0;
end 
// imm[ 24 ]
initial
begin
	imm[24] = 1'b0;
end 
// imm[ 23 ]
initial
begin
	imm[23] = 1'b0;
end 
// imm[ 22 ]
initial
begin
	imm[22] = 1'b0;
end 
// imm[ 21 ]
initial
begin
	imm[21] = 1'b0;
end 
// imm[ 20 ]
initial
begin
	imm[20] = 1'b0;
end 
// imm[ 19 ]
initial
begin
	imm[19] = 1'b0;
end 
// imm[ 18 ]
initial
begin
	imm[18] = 1'b0;
end 
// imm[ 17 ]
initial
begin
	imm[17] = 1'b0;
end 
// imm[ 16 ]
initial
begin
	imm[16] = 1'b0;
end 
// imm[ 15 ]
initial
begin
	imm[15] = 1'b0;
end 
// imm[ 14 ]
initial
begin
	imm[14] = 1'b0;
end 
// imm[ 13 ]
initial
begin
	imm[13] = 1'b0;
end 
// imm[ 12 ]
initial
begin
	imm[12] = 1'b0;
end 
// imm[ 11 ]
initial
begin
	imm[11] = 1'b0;
end 
// imm[ 10 ]
initial
begin
	imm[10] = 1'b0;
end 
// imm[ 9 ]
initial
begin
	imm[9] = 1'b0;
end 
// imm[ 8 ]
initial
begin
	imm[8] = 1'b0;
end 
// imm[ 7 ]
initial
begin
	imm[7] = 1'b0;
end 
// imm[ 6 ]
initial
begin
	imm[6] = 1'b0;
end 
// imm[ 5 ]
initial
begin
	imm[5] = 1'b0;
end 
// imm[ 4 ]
initial
begin
	imm[4] = 1'b0;
end 
// imm[ 3 ]
initial
begin
	imm[3] = 1'b0;
	imm[3] = #20000 1'b1;
	imm[3] = #90000 1'b0;
end 
// imm[ 2 ]
initial
begin
	imm[2] = 1'b0;
end 
// imm[ 1 ]
initial
begin
	imm[1] = 1'b0;
end 
// imm[ 0 ]
initial
begin
	imm[0] = 1'b0;
end 

// jump
initial
begin
	jump = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// zero
initial
begin
	zero = 1'b0;
end 
endmodule

