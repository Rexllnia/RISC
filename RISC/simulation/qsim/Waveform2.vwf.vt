// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/01/2022 11:54:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RISC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RISC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg en;
reg rst;
// wires                                               
wire eno;
wire [31:0] ins_o;
wire [31:0] jump_addr_out;
wire jump_en;
wire [31:0] op1;
wire [31:0] op2;
wire [31:0] pc;
wire [4:0] rd_addr_o;
wire [31:0] rd_data_o;
wire [4:0] rs1_addr_o;
wire [4:0] rs2_addr_o;

// assign statements (if any)                          
RISC i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.en(en),
	.eno(eno),
	.ins_o(ins_o),
	.jump_addr_out(jump_addr_out),
	.jump_en(jump_en),
	.op1(op1),
	.op2(op2),
	.pc(pc),
	.rd_addr_o(rd_addr_o),
	.rd_data_o(rd_data_o),
	.rs1_addr_o(rs1_addr_o),
	.rs2_addr_o(rs2_addr_o),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// en
initial
begin
	en = 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

