// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/30/2022 22:39:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ex
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] inst_addr_i;
reg [31:0] inst_i;
reg [31:0] op1_i;
reg [31:0] op2_i;
reg [4:0] rd_addr_i;
// wires                                               
wire hold_flag_o;
wire [31:0] jump_addr_o;
wire jump_en_o;
wire [4:0] rd_addr_o;
wire [31:0] rd_data_o;
wire rd_write_en;

// assign statements (if any)                          
ex i1 (
// port map - connection between master ports and signals/registers   
	.hold_flag_o(hold_flag_o),
	.inst_addr_i(inst_addr_i),
	.inst_i(inst_i),
	.jump_addr_o(jump_addr_o),
	.jump_en_o(jump_en_o),
	.op1_i(op1_i),
	.op2_i(op2_i),
	.rd_addr_i(rd_addr_i),
	.rd_addr_o(rd_addr_o),
	.rd_data_o(rd_data_o),
	.rd_write_en(rd_write_en)
);
initial 
begin 
#1000000 $finish;
end 
// inst_addr_i[ 31 ]
initial
begin
	inst_addr_i[31] = 1'b0;
end 
// inst_addr_i[ 30 ]
initial
begin
	inst_addr_i[30] = 1'b0;
end 
// inst_addr_i[ 29 ]
initial
begin
	inst_addr_i[29] = 1'b0;
end 
// inst_addr_i[ 28 ]
initial
begin
	inst_addr_i[28] = 1'b0;
end 
// inst_addr_i[ 27 ]
initial
begin
	inst_addr_i[27] = 1'b0;
end 
// inst_addr_i[ 26 ]
initial
begin
	inst_addr_i[26] = 1'b0;
end 
// inst_addr_i[ 25 ]
initial
begin
	inst_addr_i[25] = 1'b0;
end 
// inst_addr_i[ 24 ]
initial
begin
	inst_addr_i[24] = 1'b0;
end 
// inst_addr_i[ 23 ]
initial
begin
	inst_addr_i[23] = 1'b0;
end 
// inst_addr_i[ 22 ]
initial
begin
	inst_addr_i[22] = 1'b0;
end 
// inst_addr_i[ 21 ]
initial
begin
	inst_addr_i[21] = 1'b0;
end 
// inst_addr_i[ 20 ]
initial
begin
	inst_addr_i[20] = 1'b0;
end 
// inst_addr_i[ 19 ]
initial
begin
	inst_addr_i[19] = 1'b0;
end 
// inst_addr_i[ 18 ]
initial
begin
	inst_addr_i[18] = 1'b0;
end 
// inst_addr_i[ 17 ]
initial
begin
	inst_addr_i[17] = 1'b0;
end 
// inst_addr_i[ 16 ]
initial
begin
	inst_addr_i[16] = 1'b0;
end 
// inst_addr_i[ 15 ]
initial
begin
	inst_addr_i[15] = 1'b0;
end 
// inst_addr_i[ 14 ]
initial
begin
	inst_addr_i[14] = 1'b0;
end 
// inst_addr_i[ 13 ]
initial
begin
	inst_addr_i[13] = 1'b0;
end 
// inst_addr_i[ 12 ]
initial
begin
	inst_addr_i[12] = 1'b0;
end 
// inst_addr_i[ 11 ]
initial
begin
	inst_addr_i[11] = 1'b0;
end 
// inst_addr_i[ 10 ]
initial
begin
	inst_addr_i[10] = 1'b0;
end 
// inst_addr_i[ 9 ]
initial
begin
	inst_addr_i[9] = 1'b0;
end 
// inst_addr_i[ 8 ]
initial
begin
	inst_addr_i[8] = 1'b0;
end 
// inst_addr_i[ 7 ]
initial
begin
	inst_addr_i[7] = 1'b0;
end 
// inst_addr_i[ 6 ]
initial
begin
	inst_addr_i[6] = 1'b0;
end 
// inst_addr_i[ 5 ]
initial
begin
	inst_addr_i[5] = 1'b0;
end 
// inst_addr_i[ 4 ]
initial
begin
	inst_addr_i[4] = 1'b1;
end 
// inst_addr_i[ 3 ]
initial
begin
	inst_addr_i[3] = 1'b0;
end 
// inst_addr_i[ 2 ]
initial
begin
	inst_addr_i[2] = 1'b0;
end 
// inst_addr_i[ 1 ]
initial
begin
	inst_addr_i[1] = 1'b0;
end 
// inst_addr_i[ 0 ]
initial
begin
	inst_addr_i[0] = 1'b1;
end 
// inst_i[ 31 ]
initial
begin
	inst_i[31] = 1'b0;
end 
// inst_i[ 30 ]
initial
begin
	inst_i[30] = 1'b0;
end 
// inst_i[ 29 ]
initial
begin
	inst_i[29] = 1'b0;
end 
// inst_i[ 28 ]
initial
begin
	inst_i[28] = 1'b0;
end 
// inst_i[ 27 ]
initial
begin
	inst_i[27] = 1'b0;
end 
// inst_i[ 26 ]
initial
begin
	inst_i[26] = 1'b0;
end 
// inst_i[ 25 ]
initial
begin
	inst_i[25] = 1'b1;
end 
// inst_i[ 24 ]
initial
begin
	inst_i[24] = 1'b0;
end 
// inst_i[ 23 ]
initial
begin
	inst_i[23] = 1'b0;
end 
// inst_i[ 22 ]
initial
begin
	inst_i[22] = 1'b1;
end 
// inst_i[ 21 ]
initial
begin
	inst_i[21] = 1'b0;
end 
// inst_i[ 20 ]
initial
begin
	inst_i[20] = 1'b1;
end 
// inst_i[ 19 ]
initial
begin
	inst_i[19] = 1'b0;
end 
// inst_i[ 18 ]
initial
begin
	inst_i[18] = 1'b0;
end 
// inst_i[ 17 ]
initial
begin
	inst_i[17] = 1'b1;
end 
// inst_i[ 16 ]
initial
begin
	inst_i[16] = 1'b0;
end 
// inst_i[ 15 ]
initial
begin
	inst_i[15] = 1'b0;
end 
// inst_i[ 14 ]
initial
begin
	inst_i[14] = 1'b0;
end 
// inst_i[ 13 ]
initial
begin
	inst_i[13] = 1'b0;
end 
// inst_i[ 12 ]
initial
begin
	inst_i[12] = 1'b0;
end 
// inst_i[ 11 ]
initial
begin
	inst_i[11] = 1'b1;
end 
// inst_i[ 10 ]
initial
begin
	inst_i[10] = 1'b1;
end 
// inst_i[ 9 ]
initial
begin
	inst_i[9] = 1'b1;
end 
// inst_i[ 8 ]
initial
begin
	inst_i[8] = 1'b0;
end 
// inst_i[ 7 ]
initial
begin
	inst_i[7] = 1'b0;
end 
// inst_i[ 6 ]
initial
begin
	inst_i[6] = 1'b1;
end 
// inst_i[ 5 ]
initial
begin
	inst_i[5] = 1'b1;
end 
// inst_i[ 4 ]
initial
begin
	inst_i[4] = 1'b0;
end 
// inst_i[ 3 ]
initial
begin
	inst_i[3] = 1'b0;
end 
// inst_i[ 2 ]
initial
begin
	inst_i[2] = 1'b0;
end 
// inst_i[ 1 ]
initial
begin
	inst_i[1] = 1'b1;
end 
// inst_i[ 0 ]
initial
begin
	inst_i[0] = 1'b1;
end 
// op1_i[ 31 ]
initial
begin
	op1_i[31] = 1'b0;
end 
// op1_i[ 30 ]
initial
begin
	op1_i[30] = 1'b0;
end 
// op1_i[ 29 ]
initial
begin
	op1_i[29] = 1'b0;
end 
// op1_i[ 28 ]
initial
begin
	op1_i[28] = 1'b0;
end 
// op1_i[ 27 ]
initial
begin
	op1_i[27] = 1'b0;
end 
// op1_i[ 26 ]
initial
begin
	op1_i[26] = 1'b0;
end 
// op1_i[ 25 ]
initial
begin
	op1_i[25] = 1'b0;
end 
// op1_i[ 24 ]
initial
begin
	op1_i[24] = 1'b0;
end 
// op1_i[ 23 ]
initial
begin
	op1_i[23] = 1'b0;
end 
// op1_i[ 22 ]
initial
begin
	op1_i[22] = 1'b0;
end 
// op1_i[ 21 ]
initial
begin
	op1_i[21] = 1'b0;
end 
// op1_i[ 20 ]
initial
begin
	op1_i[20] = 1'b0;
end 
// op1_i[ 19 ]
initial
begin
	op1_i[19] = 1'b0;
end 
// op1_i[ 18 ]
initial
begin
	op1_i[18] = 1'b0;
end 
// op1_i[ 17 ]
initial
begin
	op1_i[17] = 1'b0;
end 
// op1_i[ 16 ]
initial
begin
	op1_i[16] = 1'b0;
end 
// op1_i[ 15 ]
initial
begin
	op1_i[15] = 1'b0;
end 
// op1_i[ 14 ]
initial
begin
	op1_i[14] = 1'b0;
end 
// op1_i[ 13 ]
initial
begin
	op1_i[13] = 1'b0;
end 
// op1_i[ 12 ]
initial
begin
	op1_i[12] = 1'b0;
end 
// op1_i[ 11 ]
initial
begin
	op1_i[11] = 1'b0;
end 
// op1_i[ 10 ]
initial
begin
	op1_i[10] = 1'b0;
end 
// op1_i[ 9 ]
initial
begin
	op1_i[9] = 1'b0;
end 
// op1_i[ 8 ]
initial
begin
	op1_i[8] = 1'b0;
end 
// op1_i[ 7 ]
initial
begin
	op1_i[7] = 1'b0;
end 
// op1_i[ 6 ]
initial
begin
	op1_i[6] = 1'b0;
end 
// op1_i[ 5 ]
initial
begin
	op1_i[5] = 1'b0;
end 
// op1_i[ 4 ]
initial
begin
	op1_i[4] = 1'b0;
end 
// op1_i[ 3 ]
initial
begin
	op1_i[3] = 1'b0;
end 
// op1_i[ 2 ]
initial
begin
	op1_i[2] = 1'b0;
end 
// op1_i[ 1 ]
initial
begin
	op1_i[1] = 1'b0;
end 
// op1_i[ 0 ]
initial
begin
	op1_i[0] = 1'b1;
end 
// op2_i[ 31 ]
initial
begin
	op2_i[31] = 1'b0;
end 
// op2_i[ 30 ]
initial
begin
	op2_i[30] = 1'b0;
end 
// op2_i[ 29 ]
initial
begin
	op2_i[29] = 1'b0;
end 
// op2_i[ 28 ]
initial
begin
	op2_i[28] = 1'b0;
end 
// op2_i[ 27 ]
initial
begin
	op2_i[27] = 1'b0;
end 
// op2_i[ 26 ]
initial
begin
	op2_i[26] = 1'b0;
end 
// op2_i[ 25 ]
initial
begin
	op2_i[25] = 1'b0;
end 
// op2_i[ 24 ]
initial
begin
	op2_i[24] = 1'b0;
end 
// op2_i[ 23 ]
initial
begin
	op2_i[23] = 1'b0;
end 
// op2_i[ 22 ]
initial
begin
	op2_i[22] = 1'b0;
end 
// op2_i[ 21 ]
initial
begin
	op2_i[21] = 1'b0;
end 
// op2_i[ 20 ]
initial
begin
	op2_i[20] = 1'b0;
end 
// op2_i[ 19 ]
initial
begin
	op2_i[19] = 1'b0;
end 
// op2_i[ 18 ]
initial
begin
	op2_i[18] = 1'b0;
end 
// op2_i[ 17 ]
initial
begin
	op2_i[17] = 1'b0;
end 
// op2_i[ 16 ]
initial
begin
	op2_i[16] = 1'b0;
end 
// op2_i[ 15 ]
initial
begin
	op2_i[15] = 1'b0;
end 
// op2_i[ 14 ]
initial
begin
	op2_i[14] = 1'b0;
end 
// op2_i[ 13 ]
initial
begin
	op2_i[13] = 1'b0;
end 
// op2_i[ 12 ]
initial
begin
	op2_i[12] = 1'b0;
end 
// op2_i[ 11 ]
initial
begin
	op2_i[11] = 1'b0;
end 
// op2_i[ 10 ]
initial
begin
	op2_i[10] = 1'b0;
end 
// op2_i[ 9 ]
initial
begin
	op2_i[9] = 1'b0;
end 
// op2_i[ 8 ]
initial
begin
	op2_i[8] = 1'b0;
end 
// op2_i[ 7 ]
initial
begin
	op2_i[7] = 1'b0;
end 
// op2_i[ 6 ]
initial
begin
	op2_i[6] = 1'b0;
end 
// op2_i[ 5 ]
initial
begin
	op2_i[5] = 1'b0;
end 
// op2_i[ 4 ]
initial
begin
	op2_i[4] = 1'b0;
end 
// op2_i[ 3 ]
initial
begin
	op2_i[3] = 1'b0;
end 
// op2_i[ 2 ]
initial
begin
	op2_i[2] = 1'b0;
end 
// op2_i[ 1 ]
initial
begin
	op2_i[1] = 1'b1;
end 
// op2_i[ 0 ]
initial
begin
	op2_i[0] = 1'b1;
end 
// rd_addr_i[ 4 ]
initial
begin
	rd_addr_i[4] = 1'b0;
end 
// rd_addr_i[ 3 ]
initial
begin
	rd_addr_i[3] = 1'b0;
end 
// rd_addr_i[ 2 ]
initial
begin
	rd_addr_i[2] = 1'b1;
end 
// rd_addr_i[ 1 ]
initial
begin
	rd_addr_i[1] = 1'b1;
end 
// rd_addr_i[ 0 ]
initial
begin
	rd_addr_i[0] = 1'b1;
end 
endmodule

