// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/29/2022 13:19:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          regs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] reg1_raddr_i;
reg [4:0] reg2_raddr_i;
reg [4:0] reg_waddr_i;
reg [31:0] reg_wdata_i;
reg reg_write_en;
reg rst;
// wires                                               
wire [31:0] reg1_rdata_o;
wire [31:0] reg2_rdata_o;

// assign statements (if any)                          
regs i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reg1_raddr_i(reg1_raddr_i),
	.reg1_rdata_o(reg1_rdata_o),
	.reg2_raddr_i(reg2_raddr_i),
	.reg2_rdata_o(reg2_rdata_o),
	.reg_waddr_i(reg_waddr_i),
	.reg_wdata_i(reg_wdata_i),
	.reg_write_en(reg_write_en),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// reg1_raddr_i[ 4 ]
initial
begin
	reg1_raddr_i[4] = 1'b0;
end 
// reg1_raddr_i[ 3 ]
initial
begin
	reg1_raddr_i[3] = 1'b0;
end 
// reg1_raddr_i[ 2 ]
initial
begin
	reg1_raddr_i[2] = 1'b0;
end 
// reg1_raddr_i[ 1 ]
initial
begin
	reg1_raddr_i[1] = 1'b0;
	reg1_raddr_i[1] = #110000 1'b1;
	reg1_raddr_i[1] = #60000 1'b0;
end 
// reg1_raddr_i[ 0 ]
initial
begin
	reg1_raddr_i[0] = 1'b0;
end 
// reg2_raddr_i[ 4 ]
initial
begin
	reg2_raddr_i[4] = 1'b0;
end 
// reg2_raddr_i[ 3 ]
initial
begin
	reg2_raddr_i[3] = 1'b0;
end 
// reg2_raddr_i[ 2 ]
initial
begin
	reg2_raddr_i[2] = 1'b0;
end 
// reg2_raddr_i[ 1 ]
initial
begin
	reg2_raddr_i[1] = 1'b0;
end 
// reg2_raddr_i[ 0 ]
initial
begin
	reg2_raddr_i[0] = 1'b0;
end 
// reg_waddr_i[ 4 ]
initial
begin
	reg_waddr_i[4] = 1'b0;
end 
// reg_waddr_i[ 3 ]
initial
begin
	reg_waddr_i[3] = 1'b0;
end 
// reg_waddr_i[ 2 ]
initial
begin
	reg_waddr_i[2] = 1'b0;
end 
// reg_waddr_i[ 1 ]
initial
begin
	reg_waddr_i[1] = 1'b0;
end 
// reg_waddr_i[ 0 ]
initial
begin
	reg_waddr_i[0] = 1'b0;
end 
// reg_wdata_i[ 31 ]
initial
begin
	reg_wdata_i[31] = 1'b0;
end 
// reg_wdata_i[ 30 ]
initial
begin
	reg_wdata_i[30] = 1'b0;
end 
// reg_wdata_i[ 29 ]
initial
begin
	reg_wdata_i[29] = 1'b0;
end 
// reg_wdata_i[ 28 ]
initial
begin
	reg_wdata_i[28] = 1'b0;
end 
// reg_wdata_i[ 27 ]
initial
begin
	reg_wdata_i[27] = 1'b0;
end 
// reg_wdata_i[ 26 ]
initial
begin
	reg_wdata_i[26] = 1'b0;
end 
// reg_wdata_i[ 25 ]
initial
begin
	reg_wdata_i[25] = 1'b0;
end 
// reg_wdata_i[ 24 ]
initial
begin
	reg_wdata_i[24] = 1'b0;
end 
// reg_wdata_i[ 23 ]
initial
begin
	reg_wdata_i[23] = 1'b0;
end 
// reg_wdata_i[ 22 ]
initial
begin
	reg_wdata_i[22] = 1'b0;
end 
// reg_wdata_i[ 21 ]
initial
begin
	reg_wdata_i[21] = 1'b0;
end 
// reg_wdata_i[ 20 ]
initial
begin
	reg_wdata_i[20] = 1'b0;
end 
// reg_wdata_i[ 19 ]
initial
begin
	reg_wdata_i[19] = 1'b0;
end 
// reg_wdata_i[ 18 ]
initial
begin
	reg_wdata_i[18] = 1'b0;
end 
// reg_wdata_i[ 17 ]
initial
begin
	reg_wdata_i[17] = 1'b0;
end 
// reg_wdata_i[ 16 ]
initial
begin
	reg_wdata_i[16] = 1'b0;
end 
// reg_wdata_i[ 15 ]
initial
begin
	reg_wdata_i[15] = 1'b0;
end 
// reg_wdata_i[ 14 ]
initial
begin
	reg_wdata_i[14] = 1'b0;
end 
// reg_wdata_i[ 13 ]
initial
begin
	reg_wdata_i[13] = 1'b0;
end 
// reg_wdata_i[ 12 ]
initial
begin
	reg_wdata_i[12] = 1'b0;
end 
// reg_wdata_i[ 11 ]
initial
begin
	reg_wdata_i[11] = 1'b0;
end 
// reg_wdata_i[ 10 ]
initial
begin
	reg_wdata_i[10] = 1'b0;
end 
// reg_wdata_i[ 9 ]
initial
begin
	reg_wdata_i[9] = 1'b0;
end 
// reg_wdata_i[ 8 ]
initial
begin
	reg_wdata_i[8] = 1'b0;
end 
// reg_wdata_i[ 7 ]
initial
begin
	reg_wdata_i[7] = 1'b0;
end 
// reg_wdata_i[ 6 ]
initial
begin
	reg_wdata_i[6] = 1'b0;
end 
// reg_wdata_i[ 5 ]
initial
begin
	reg_wdata_i[5] = 1'b0;
end 
// reg_wdata_i[ 4 ]
initial
begin
	reg_wdata_i[4] = 1'b0;
end 
// reg_wdata_i[ 3 ]
initial
begin
	reg_wdata_i[3] = 1'b0;
end 
// reg_wdata_i[ 2 ]
initial
begin
	reg_wdata_i[2] = 1'b0;
end 
// reg_wdata_i[ 1 ]
initial
begin
	reg_wdata_i[1] = 1'b0;
end 
// reg_wdata_i[ 0 ]
initial
begin
	reg_wdata_i[0] = 1'b0;
end 

// reg_write_en
initial
begin
	reg_write_en = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

