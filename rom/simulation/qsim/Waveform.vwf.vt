// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2022 19:33:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rom
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rom_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ins_i;
// wires                                               
wire [31:0] ins_o;

// assign statements (if any)                          
rom i1 (
// port map - connection between master ports and signals/registers   
	.ins_i(ins_i),
	.ins_o(ins_o)
);
initial 
begin 
#1000000 $finish;
end 
// ins_i[ 31 ]
initial
begin
	ins_i[31] = 1'b0;
end 
// ins_i[ 30 ]
initial
begin
	ins_i[30] = 1'b0;
end 
// ins_i[ 29 ]
initial
begin
	ins_i[29] = 1'b0;
end 
// ins_i[ 28 ]
initial
begin
	ins_i[28] = 1'b0;
end 
// ins_i[ 27 ]
initial
begin
	ins_i[27] = 1'b0;
end 
// ins_i[ 26 ]
initial
begin
	ins_i[26] = 1'b0;
end 
// ins_i[ 25 ]
initial
begin
	ins_i[25] = 1'b0;
end 
// ins_i[ 24 ]
initial
begin
	ins_i[24] = 1'b0;
end 
// ins_i[ 23 ]
initial
begin
	ins_i[23] = 1'b0;
end 
// ins_i[ 22 ]
initial
begin
	ins_i[22] = 1'b0;
end 
// ins_i[ 21 ]
initial
begin
	ins_i[21] = 1'b0;
end 
// ins_i[ 20 ]
initial
begin
	ins_i[20] = 1'b0;
end 
// ins_i[ 19 ]
initial
begin
	ins_i[19] = 1'b0;
end 
// ins_i[ 18 ]
initial
begin
	ins_i[18] = 1'b0;
end 
// ins_i[ 17 ]
initial
begin
	ins_i[17] = 1'b0;
end 
// ins_i[ 16 ]
initial
begin
	ins_i[16] = 1'b0;
end 
// ins_i[ 15 ]
initial
begin
	ins_i[15] = 1'b0;
end 
// ins_i[ 14 ]
initial
begin
	ins_i[14] = 1'b0;
end 
// ins_i[ 13 ]
initial
begin
	ins_i[13] = 1'b0;
end 
// ins_i[ 12 ]
initial
begin
	ins_i[12] = 1'b0;
end 
// ins_i[ 11 ]
initial
begin
	ins_i[11] = 1'b0;
end 
// ins_i[ 10 ]
initial
begin
	ins_i[10] = 1'b0;
end 
// ins_i[ 9 ]
initial
begin
	ins_i[9] = 1'b0;
end 
// ins_i[ 8 ]
initial
begin
	ins_i[8] = 1'b0;
end 
// ins_i[ 7 ]
initial
begin
	ins_i[7] = 1'b0;
end 
// ins_i[ 6 ]
initial
begin
	ins_i[6] = 1'b0;
end 
// ins_i[ 5 ]
initial
begin
	ins_i[5] = 1'b0;
end 
// ins_i[ 4 ]
initial
begin
	ins_i[4] = 1'b0;
end 
// ins_i[ 3 ]
initial
begin
	ins_i[3] = 1'b0;
end 
// ins_i[ 2 ]
initial
begin
	ins_i[2] = 1'b0;
end 
// ins_i[ 1 ]
initial
begin
	ins_i[1] = 1'b0;
end 
// ins_i[ 0 ]
initial
begin
	ins_i[0] = 1'b0;
end 
endmodule

